// Code generated by protoc-gen-go.
// source: protoeasy.proto
// DO NOT EDIT!

package protoeasy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ArchiveType int32

const (
	ArchiveType_ARCHIVE_TYPE_NONE ArchiveType = 0
	ArchiveType_ARCHIVE_TYPE_TAR  ArchiveType = 1
)

var ArchiveType_name = map[int32]string{
	0: "ARCHIVE_TYPE_NONE",
	1: "ARCHIVE_TYPE_TAR",
}
var ArchiveType_value = map[string]int32{
	"ARCHIVE_TYPE_NONE": 0,
	"ARCHIVE_TYPE_TAR":  1,
}

func (x ArchiveType) String() string {
	return proto.EnumName(ArchiveType_name, int32(x))
}
func (ArchiveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PluginType int32

const (
	PluginType_PLUGIN_TYPE_NONE   PluginType = 0
	PluginType_PLUGIN_TYPE_CPP    PluginType = 1
	PluginType_PLUGIN_TYPE_CSHARP PluginType = 2
	PluginType_PLUGIN_TYPE_GO     PluginType = 3
	PluginType_PLUGIN_TYPE_OBJC   PluginType = 4
	PluginType_PLUGIN_TYPE_PYTHON PluginType = 5
	PluginType_PLUGIN_TYPE_RUBY   PluginType = 6
)

var PluginType_name = map[int32]string{
	0: "PLUGIN_TYPE_NONE",
	1: "PLUGIN_TYPE_CPP",
	2: "PLUGIN_TYPE_CSHARP",
	3: "PLUGIN_TYPE_GO",
	4: "PLUGIN_TYPE_OBJC",
	5: "PLUGIN_TYPE_PYTHON",
	6: "PLUGIN_TYPE_RUBY",
}
var PluginType_value = map[string]int32{
	"PLUGIN_TYPE_NONE":   0,
	"PLUGIN_TYPE_CPP":    1,
	"PLUGIN_TYPE_CSHARP": 2,
	"PLUGIN_TYPE_GO":     3,
	"PLUGIN_TYPE_OBJC":   4,
	"PLUGIN_TYPE_PYTHON": 5,
	"PLUGIN_TYPE_RUBY":   6,
}

func (x PluginType) String() string {
	return proto.EnumName(PluginType_name, int32(x))
}
func (PluginType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GoPluginType int32

const (
	GoPluginType_GO_PLUGIN_TYPE_NONE       GoPluginType = 0
	GoPluginType_GO_PLUGIN_TYPE_GO         GoPluginType = 1
	GoPluginType_GO_PLUGIN_TYPE_GOFAST     GoPluginType = 2
	GoPluginType_GO_PLUGIN_TYPE_GOGO       GoPluginType = 3
	GoPluginType_GO_PLUGIN_TYPE_GOGOFAST   GoPluginType = 4
	GoPluginType_GO_PLUGIN_TYPE_GOGOFASTER GoPluginType = 5
	GoPluginType_GO_PLUGIN_TYPE_GOGOSLICK  GoPluginType = 6
)

var GoPluginType_name = map[int32]string{
	0: "GO_PLUGIN_TYPE_NONE",
	1: "GO_PLUGIN_TYPE_GO",
	2: "GO_PLUGIN_TYPE_GOFAST",
	3: "GO_PLUGIN_TYPE_GOGO",
	4: "GO_PLUGIN_TYPE_GOGOFAST",
	5: "GO_PLUGIN_TYPE_GOGOFASTER",
	6: "GO_PLUGIN_TYPE_GOGOSLICK",
}
var GoPluginType_value = map[string]int32{
	"GO_PLUGIN_TYPE_NONE":       0,
	"GO_PLUGIN_TYPE_GO":         1,
	"GO_PLUGIN_TYPE_GOFAST":     2,
	"GO_PLUGIN_TYPE_GOGO":       3,
	"GO_PLUGIN_TYPE_GOGOFAST":   4,
	"GO_PLUGIN_TYPE_GOGOFASTER": 5,
	"GO_PLUGIN_TYPE_GOGOSLICK":  6,
}

func (x GoPluginType) String() string {
	return proto.EnumName(GoPluginType_name, int32(x))
}
func (GoPluginType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PluginOptions struct {
	RelOutDirPath string `protobuf:"bytes,1,opt,name=rel_out_dir_path" json:"rel_out_dir_path,omitempty"`
}

func (m *PluginOptions) Reset()                    { *m = PluginOptions{} }
func (m *PluginOptions) String() string            { return proto.CompactTextString(m) }
func (*PluginOptions) ProtoMessage()               {}
func (*PluginOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GrpcPluginOptions struct {
	PluginOptions *PluginOptions `protobuf:"bytes,1,opt,name=plugin_options" json:"plugin_options,omitempty"`
	Grpc          bool           `protobuf:"varint,2,opt,name=grpc" json:"grpc,omitempty"`
}

func (m *GrpcPluginOptions) Reset()                    { *m = GrpcPluginOptions{} }
func (m *GrpcPluginOptions) String() string            { return proto.CompactTextString(m) }
func (*GrpcPluginOptions) ProtoMessage()               {}
func (*GrpcPluginOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GrpcPluginOptions) GetPluginOptions() *PluginOptions {
	if m != nil {
		return m.PluginOptions
	}
	return nil
}

type CppPluginOptions struct {
	GrpcPluginOptions *GrpcPluginOptions `protobuf:"bytes,1,opt,name=grpc_plugin_options" json:"grpc_plugin_options,omitempty"`
}

func (m *CppPluginOptions) Reset()                    { *m = CppPluginOptions{} }
func (m *CppPluginOptions) String() string            { return proto.CompactTextString(m) }
func (*CppPluginOptions) ProtoMessage()               {}
func (*CppPluginOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CppPluginOptions) GetGrpcPluginOptions() *GrpcPluginOptions {
	if m != nil {
		return m.GrpcPluginOptions
	}
	return nil
}

type CsharpPluginOptions struct {
	GrpcPluginOptions *GrpcPluginOptions `protobuf:"bytes,1,opt,name=grpc_plugin_options" json:"grpc_plugin_options,omitempty"`
}

func (m *CsharpPluginOptions) Reset()                    { *m = CsharpPluginOptions{} }
func (m *CsharpPluginOptions) String() string            { return proto.CompactTextString(m) }
func (*CsharpPluginOptions) ProtoMessage()               {}
func (*CsharpPluginOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CsharpPluginOptions) GetGrpcPluginOptions() *GrpcPluginOptions {
	if m != nil {
		return m.GrpcPluginOptions
	}
	return nil
}

type GoPluginOptions struct {
	GrpcPluginOptions  *GrpcPluginOptions `protobuf:"bytes,1,opt,name=grpc_plugin_options" json:"grpc_plugin_options,omitempty"`
	GrpcGateway        bool               `protobuf:"varint,2,opt,name=grpc_gateway" json:"grpc_gateway,omitempty"`
	ImportPath         string             `protobuf:"bytes,3,opt,name=import_path" json:"import_path,omitempty"`
	NoDefaultModifiers bool               `protobuf:"varint,4,opt,name=no_default_modifiers" json:"no_default_modifiers,omitempty"`
	Modifiers          map[string]string  `protobuf:"bytes,5,rep,name=modifiers" json:"modifiers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PluginType         GoPluginType       `protobuf:"varint,6,opt,name=plugin_type,enum=protoeasy.GoPluginType" json:"plugin_type,omitempty"`
}

func (m *GoPluginOptions) Reset()                    { *m = GoPluginOptions{} }
func (m *GoPluginOptions) String() string            { return proto.CompactTextString(m) }
func (*GoPluginOptions) ProtoMessage()               {}
func (*GoPluginOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GoPluginOptions) GetGrpcPluginOptions() *GrpcPluginOptions {
	if m != nil {
		return m.GrpcPluginOptions
	}
	return nil
}

func (m *GoPluginOptions) GetModifiers() map[string]string {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

type ObjcPluginOptions struct {
	GrpcPluginOptions *GrpcPluginOptions `protobuf:"bytes,1,opt,name=grpc_plugin_options" json:"grpc_plugin_options,omitempty"`
}

func (m *ObjcPluginOptions) Reset()                    { *m = ObjcPluginOptions{} }
func (m *ObjcPluginOptions) String() string            { return proto.CompactTextString(m) }
func (*ObjcPluginOptions) ProtoMessage()               {}
func (*ObjcPluginOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ObjcPluginOptions) GetGrpcPluginOptions() *GrpcPluginOptions {
	if m != nil {
		return m.GrpcPluginOptions
	}
	return nil
}

type PythonPluginOptions struct {
	GrpcPluginOptions *GrpcPluginOptions `protobuf:"bytes,1,opt,name=grpc_plugin_options" json:"grpc_plugin_options,omitempty"`
}

func (m *PythonPluginOptions) Reset()                    { *m = PythonPluginOptions{} }
func (m *PythonPluginOptions) String() string            { return proto.CompactTextString(m) }
func (*PythonPluginOptions) ProtoMessage()               {}
func (*PythonPluginOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PythonPluginOptions) GetGrpcPluginOptions() *GrpcPluginOptions {
	if m != nil {
		return m.GrpcPluginOptions
	}
	return nil
}

type RubyPluginOptions struct {
	GrpcPluginOptions *GrpcPluginOptions `protobuf:"bytes,1,opt,name=grpc_plugin_options" json:"grpc_plugin_options,omitempty"`
}

func (m *RubyPluginOptions) Reset()                    { *m = RubyPluginOptions{} }
func (m *RubyPluginOptions) String() string            { return proto.CompactTextString(m) }
func (*RubyPluginOptions) ProtoMessage()               {}
func (*RubyPluginOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RubyPluginOptions) GetGrpcPluginOptions() *GrpcPluginOptions {
	if m != nil {
		return m.GrpcPluginOptions
	}
	return nil
}

type Directives struct {
	PluginType          []PluginType         `protobuf:"varint,1,rep,name=plugin_type,enum=protoeasy.PluginType" json:"plugin_type,omitempty"`
	ExcludePattern      []string             `protobuf:"bytes,2,rep,name=exclude_pattern" json:"exclude_pattern,omitempty"`
	CppPluginOptions    *CppPluginOptions    `protobuf:"bytes,3,opt,name=cpp_plugin_options" json:"cpp_plugin_options,omitempty"`
	CsharpPluginOptions *CsharpPluginOptions `protobuf:"bytes,4,opt,name=csharp_plugin_options" json:"csharp_plugin_options,omitempty"`
	GoPluginOptions     *GoPluginOptions     `protobuf:"bytes,5,opt,name=go_plugin_options" json:"go_plugin_options,omitempty"`
	ObjcPluginOptions   *ObjcPluginOptions   `protobuf:"bytes,6,opt,name=objc_plugin_options" json:"objc_plugin_options,omitempty"`
	PythonPluginOptions *PythonPluginOptions `protobuf:"bytes,7,opt,name=python_plugin_options" json:"python_plugin_options,omitempty"`
	RubyPluginOptions   *RubyPluginOptions   `protobuf:"bytes,8,opt,name=ruby_plugin_options" json:"ruby_plugin_options,omitempty"`
}

func (m *Directives) Reset()                    { *m = Directives{} }
func (m *Directives) String() string            { return proto.CompactTextString(m) }
func (*Directives) ProtoMessage()               {}
func (*Directives) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Directives) GetCppPluginOptions() *CppPluginOptions {
	if m != nil {
		return m.CppPluginOptions
	}
	return nil
}

func (m *Directives) GetCsharpPluginOptions() *CsharpPluginOptions {
	if m != nil {
		return m.CsharpPluginOptions
	}
	return nil
}

func (m *Directives) GetGoPluginOptions() *GoPluginOptions {
	if m != nil {
		return m.GoPluginOptions
	}
	return nil
}

func (m *Directives) GetObjcPluginOptions() *ObjcPluginOptions {
	if m != nil {
		return m.ObjcPluginOptions
	}
	return nil
}

func (m *Directives) GetPythonPluginOptions() *PythonPluginOptions {
	if m != nil {
		return m.PythonPluginOptions
	}
	return nil
}

func (m *Directives) GetRubyPluginOptions() *RubyPluginOptions {
	if m != nil {
		return m.RubyPluginOptions
	}
	return nil
}

type Command struct {
	Arg []string `protobuf:"bytes,1,rep,name=arg" json:"arg,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type Archive struct {
	Type  ArchiveType `protobuf:"varint,1,opt,name=type,enum=protoeasy.ArchiveType" json:"type,omitempty"`
	Value []byte      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Archive) Reset()                    { *m = Archive{} }
func (m *Archive) String() string            { return proto.CompactTextString(m) }
func (*Archive) ProtoMessage()               {}
func (*Archive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type CompileRequest struct {
	Archive    *Archive    `protobuf:"bytes,1,opt,name=archive" json:"archive,omitempty"`
	Directives *Directives `protobuf:"bytes,2,opt,name=directives" json:"directives,omitempty"`
}

func (m *CompileRequest) Reset()                    { *m = CompileRequest{} }
func (m *CompileRequest) String() string            { return proto.CompactTextString(m) }
func (*CompileRequest) ProtoMessage()               {}
func (*CompileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CompileRequest) GetArchive() *Archive {
	if m != nil {
		return m.Archive
	}
	return nil
}

func (m *CompileRequest) GetDirectives() *Directives {
	if m != nil {
		return m.Directives
	}
	return nil
}

type CompileResponse struct {
	Archive *Archive   `protobuf:"bytes,1,opt,name=archive" json:"archive,omitempty"`
	Command []*Command `protobuf:"bytes,2,rep,name=command" json:"command,omitempty"`
}

func (m *CompileResponse) Reset()                    { *m = CompileResponse{} }
func (m *CompileResponse) String() string            { return proto.CompactTextString(m) }
func (*CompileResponse) ProtoMessage()               {}
func (*CompileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CompileResponse) GetArchive() *Archive {
	if m != nil {
		return m.Archive
	}
	return nil
}

func (m *CompileResponse) GetCommand() []*Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func init() {
	proto.RegisterType((*PluginOptions)(nil), "protoeasy.PluginOptions")
	proto.RegisterType((*GrpcPluginOptions)(nil), "protoeasy.GrpcPluginOptions")
	proto.RegisterType((*CppPluginOptions)(nil), "protoeasy.CppPluginOptions")
	proto.RegisterType((*CsharpPluginOptions)(nil), "protoeasy.CsharpPluginOptions")
	proto.RegisterType((*GoPluginOptions)(nil), "protoeasy.GoPluginOptions")
	proto.RegisterType((*ObjcPluginOptions)(nil), "protoeasy.ObjcPluginOptions")
	proto.RegisterType((*PythonPluginOptions)(nil), "protoeasy.PythonPluginOptions")
	proto.RegisterType((*RubyPluginOptions)(nil), "protoeasy.RubyPluginOptions")
	proto.RegisterType((*Directives)(nil), "protoeasy.Directives")
	proto.RegisterType((*Command)(nil), "protoeasy.Command")
	proto.RegisterType((*Archive)(nil), "protoeasy.Archive")
	proto.RegisterType((*CompileRequest)(nil), "protoeasy.CompileRequest")
	proto.RegisterType((*CompileResponse)(nil), "protoeasy.CompileResponse")
	proto.RegisterEnum("protoeasy.ArchiveType", ArchiveType_name, ArchiveType_value)
	proto.RegisterEnum("protoeasy.PluginType", PluginType_name, PluginType_value)
	proto.RegisterEnum("protoeasy.GoPluginType", GoPluginType_name, GoPluginType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error) {
	out := new(CompileResponse)
	err := grpc.Invoke(ctx, "/protoeasy.API/Compile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Compile(context.Context, *CompileRequest) (*CompileResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Compile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoeasy.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _API_Compile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0x6d, 0x6f, 0xd2, 0x50,
	0x14, 0x5e, 0x29, 0x2f, 0xe3, 0xc0, 0xa0, 0x5c, 0xc6, 0xc6, 0xd8, 0x34, 0x4b, 0xf5, 0x83, 0x23,
	0x66, 0x31, 0x18, 0xa3, 0x2e, 0x6a, 0xc2, 0x10, 0x19, 0xba, 0xd1, 0x06, 0x98, 0xc9, 0xe2, 0x87,
	0xda, 0x95, 0x3b, 0xa8, 0x02, 0xbd, 0x96, 0x76, 0xda, 0x5f, 0xe4, 0x0f, 0x30, 0xfe, 0x0b, 0x7f,
	0x94, 0xb7, 0xb7, 0xb8, 0xf5, 0x6d, 0x89, 0x1f, 0xf8, 0xd6, 0x9c, 0x73, 0x9e, 0xe7, 0x9c, 0x7b,
	0x9e, 0xe7, 0x14, 0x8a, 0xc4, 0x34, 0x2c, 0x03, 0xab, 0x0b, 0xe7, 0x90, 0x7d, 0xa1, 0xec, 0x4d,
	0x40, 0x3c, 0x80, 0x0d, 0x79, 0x6a, 0x8f, 0xf5, 0xb9, 0x44, 0x2c, 0xdd, 0x98, 0x2f, 0x50, 0x15,
	0x04, 0x13, 0x4f, 0x15, 0xc3, 0xb6, 0x94, 0x91, 0x6e, 0x2a, 0x44, 0xb5, 0x26, 0x55, 0x6e, 0x9f,
	0x7b, 0x94, 0x15, 0x07, 0x50, 0xea, 0x98, 0x44, 0x0b, 0x96, 0x3f, 0x81, 0x02, 0x61, 0x01, 0xc5,
	0xf0, 0x22, 0xac, 0x38, 0xd7, 0xa8, 0x1e, 0xde, 0x36, 0x0d, 0x22, 0xf2, 0x90, 0x1c, 0x53, 0x9a,
	0x6a, 0x82, 0xd6, 0xad, 0x8b, 0x67, 0x20, 0xb4, 0x08, 0x09, 0x56, 0xbc, 0x84, 0xb2, 0x5b, 0xa1,
	0xc4, 0x12, 0xef, 0xf9, 0x88, 0x23, 0xe3, 0x88, 0x32, 0x94, 0x5b, 0x8b, 0x89, 0x6a, 0xae, 0x8e,
	0xf1, 0x57, 0x02, 0x8a, 0x1d, 0x63, 0x55, 0x74, 0x68, 0x13, 0xf2, 0x0c, 0x3a, 0x56, 0x2d, 0xfc,
	0x5d, 0x75, 0xbc, 0x2d, 0xa0, 0x32, 0xe4, 0xf4, 0x19, 0x31, 0x4c, 0xcb, 0xdb, 0x37, 0xef, 0xee,
	0x1b, 0xed, 0xc1, 0xe6, 0xdc, 0x50, 0x46, 0xf8, 0x4a, 0xb5, 0xa7, 0x96, 0x32, 0x33, 0x46, 0xfa,
	0x95, 0x8e, 0xcd, 0x45, 0x35, 0xc9, 0x20, 0xaf, 0x20, 0x7b, 0x1b, 0x4a, 0xed, 0xf3, 0xb4, 0xf3,
	0x81, 0xbf, 0x73, 0x70, 0xe4, 0xc3, 0xb3, 0x7f, 0xb5, 0xed, 0xb9, 0x65, 0x3a, 0xe8, 0x31, 0xe4,
	0x96, 0xc3, 0x5b, 0x0e, 0xc1, 0xd5, 0x34, 0xa5, 0x2c, 0x34, 0xb6, 0x63, 0xf0, 0x43, 0x9a, 0xae,
	0x51, 0x91, 0x43, 0xf8, 0x1c, 0xf0, 0x5f, 0xb1, 0xe3, 0x19, 0x03, 0x6d, 0x40, 0xea, 0x5a, 0x9d,
	0xda, 0x98, 0x3d, 0x26, 0x7b, 0x94, 0x78, 0xc1, 0x89, 0x3d, 0x28, 0x49, 0x97, 0x5f, 0xb4, 0x55,
	0xea, 0x2a, 0x3b, 0xd6, 0xc4, 0x98, 0xaf, 0x8c, 0x91, 0x4e, 0xd8, 0xb7, 0x2f, 0x9d, 0x95, 0xf1,
	0xfd, 0xe6, 0x01, 0xde, 0xea, 0x26, 0xd6, 0x2c, 0xfd, 0x1a, 0x2f, 0x50, 0x3d, 0xb8, 0x60, 0x8e,
	0x0a, 0x54, 0x68, 0x54, 0x22, 0x47, 0xe1, 0xae, 0x17, 0x6d, 0x43, 0x11, 0xff, 0xd0, 0xa6, 0xf6,
	0x08, 0xbb, 0xf2, 0x5b, 0xd8, 0x9c, 0xd3, 0x4d, 0xf2, 0x74, 0xb1, 0xcf, 0x01, 0x69, 0x84, 0x84,
	0xa7, 0xe1, 0xd9, 0x34, 0xbb, 0x3e, 0xae, 0xc8, 0x05, 0xbd, 0x86, 0x8a, 0xc6, 0xce, 0x20, 0x8c,
	0x4d, 0x32, 0xec, 0x7d, 0x3f, 0x36, 0xe6, 0x5c, 0x9e, 0x41, 0x69, 0x6c, 0x84, 0xa1, 0x29, 0x06,
	0xad, 0xdd, 0xed, 0x31, 0x77, 0x7b, 0x06, 0x15, 0x3d, 0x0c, 0x4c, 0x47, 0xb6, 0x17, 0xb5, 0x06,
	0x1d, 0x98, 0x30, 0x7d, 0xc3, 0xe0, 0x4c, 0x64, 0xe0, 0x3b, 0x7c, 0x60, 0x52, 0x31, 0xc3, 0xe0,
	0xf5, 0x48, 0xe7, 0x88, 0xe4, 0xe2, 0x16, 0x64, 0x5a, 0xc6, 0x6c, 0xa6, 0xce, 0x47, 0xae, 0xa9,
	0x55, 0x73, 0xcc, 0xb4, 0xca, 0x8a, 0x6f, 0x20, 0xd3, 0x34, 0xb5, 0x09, 0x15, 0x13, 0x3d, 0x84,
	0xe4, 0x52, 0x44, 0xf7, 0x4a, 0xb6, 0x7c, 0x74, 0xcb, 0x0a, 0xa6, 0x62, 0xe0, 0x0a, 0xf2, 0xe2,
	0x67, 0x28, 0x50, 0x5e, 0xa2, 0x4f, 0x71, 0x1f, 0x7f, 0xb3, 0xf1, 0xc2, 0x42, 0x0f, 0x20, 0xa3,
	0x7a, 0xf5, 0x4b, 0x43, 0xa1, 0x28, 0x13, 0x3a, 0x00, 0x18, 0xdd, 0xb8, 0x88, 0x51, 0xe5, 0x02,
	0xb6, 0xb9, 0xb5, 0x98, 0xf8, 0x09, 0x8a, 0x37, 0x1d, 0x16, 0x84, 0xbe, 0x05, 0xff, 0x5f, 0x0b,
	0x5a, 0xa4, 0x79, 0x2f, 0x66, 0x36, 0x0b, 0x16, 0x2d, 0x77, 0x51, 0x3f, 0x82, 0x9c, 0xff, 0x71,
	0x15, 0x28, 0x35, 0xfb, 0xad, 0x93, 0xee, 0xc7, 0xb6, 0x32, 0xbc, 0x90, 0xdb, 0x4a, 0x4f, 0xea,
	0xb5, 0x85, 0x35, 0xfa, 0x37, 0x13, 0x02, 0xe1, 0x61, 0xb3, 0x2f, 0x70, 0xf5, 0x9f, 0x1c, 0x80,
	0xcf, 0xde, 0xb4, 0x48, 0x3e, 0x3d, 0xef, 0x74, 0x7b, 0x01, 0x68, 0x19, 0x8a, 0xfe, 0x68, 0x4b,
	0x96, 0x05, 0x0e, 0x6d, 0x01, 0x0a, 0x04, 0x07, 0x27, 0xcd, 0xbe, 0x2c, 0x24, 0x10, 0x82, 0x82,
	0x3f, 0xde, 0x91, 0x04, 0x3e, 0x4c, 0x2b, 0x1d, 0xbf, 0x6f, 0x09, 0xc9, 0x30, 0x83, 0x7c, 0x31,
	0x3c, 0x91, 0x7a, 0x42, 0x2a, 0x5c, 0xdd, 0x3f, 0x3f, 0xbe, 0x10, 0xd2, 0xf5, 0x3f, 0x1c, 0xe4,
	0xfd, 0x7f, 0x3a, 0x7a, 0x8a, 0xe5, 0x8e, 0xa4, 0xc4, 0x8c, 0x4b, 0x17, 0x10, 0x4a, 0xd0, 0x21,
	0x38, 0xb4, 0x03, 0x95, 0x48, 0xf8, 0x5d, 0x73, 0x30, 0xa4, 0x33, 0x47, 0xa9, 0x3a, 0x12, 0x1b,
	0x7c, 0x17, 0xb6, 0x63, 0x12, 0x0c, 0x95, 0x44, 0xf7, 0x60, 0xe7, 0x8e, 0x64, 0xbb, 0x4f, 0x9f,
	0xb1, 0x07, 0xd5, 0x98, 0xf4, 0xe0, 0xb4, 0xdb, 0xfa, 0x20, 0xa4, 0x1b, 0x5d, 0xe0, 0x9b, 0x72,
	0x17, 0x1d, 0x33, 0x4b, 0xbb, 0xc6, 0x40, 0x3b, 0x41, 0x69, 0x7d, 0x76, 0xac, 0xd5, 0xe2, 0x52,
	0x9e, 0x8f, 0xc4, 0xb5, 0xcb, 0x34, 0x4b, 0x3e, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x47, 0x9a,
	0x21, 0xf2, 0x3c, 0x08, 0x00, 0x00,
}
