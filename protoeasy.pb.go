// Code generated by protoc-gen-go.
// source: protoeasy.proto
// DO NOT EDIT!

package protoeasy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Directives struct {
	Cpp                 bool     `protobuf:"varint,1,opt,name=cpp" json:"cpp,omitempty"`
	CppRelOutDirPath    string   `protobuf:"bytes,2,opt,name=cpp_rel_out_dir_path" json:"cpp_rel_out_dir_path,omitempty"`
	Csharp              bool     `protobuf:"varint,3,opt,name=csharp" json:"csharp,omitempty"`
	CsharpRelOutDirPath string   `protobuf:"bytes,4,opt,name=csharp_rel_out_dir_path" json:"csharp_rel_out_dir_path,omitempty"`
	Objc                bool     `protobuf:"varint,5,opt,name=objc" json:"objc,omitempty"`
	ObjcRelOutDirPath   string   `protobuf:"bytes,6,opt,name=objc_rel_out_dir_path" json:"objc_rel_out_dir_path,omitempty"`
	Python              bool     `protobuf:"varint,7,opt,name=python" json:"python,omitempty"`
	PythonRelOutDirPath string   `protobuf:"bytes,8,opt,name=python_rel_out_dir_path" json:"python_rel_out_dir_path,omitempty"`
	Ruby                bool     `protobuf:"varint,9,opt,name=ruby" json:"ruby,omitempty"`
	RubyRelOutDirPath   string   `protobuf:"bytes,10,opt,name=ruby_rel_out_dir_path" json:"ruby_rel_out_dir_path,omitempty"`
	Go                  bool     `protobuf:"varint,11,opt,name=go" json:"go,omitempty"`
	GoRelOutDirPath     string   `protobuf:"bytes,12,opt,name=go_rel_out_dir_path" json:"go_rel_out_dir_path,omitempty"`
	GoImportPath        string   `protobuf:"bytes,14,opt,name=go_import_path" json:"go_import_path,omitempty"`
	Grpc                bool     `protobuf:"varint,15,opt,name=grpc" json:"grpc,omitempty"`
	GrpcGateway         bool     `protobuf:"varint,16,opt,name=grpc_gateway" json:"grpc_gateway,omitempty"`
	NoDefaultModifiers  bool     `protobuf:"varint,17,opt,name=no_default_modifiers" json:"no_default_modifiers,omitempty"`
	ExcludePattern      []string `protobuf:"bytes,18,rep,name=exclude_pattern" json:"exclude_pattern,omitempty"`
}

func (m *Directives) Reset()                    { *m = Directives{} }
func (m *Directives) String() string            { return proto.CompactTextString(m) }
func (*Directives) ProtoMessage()               {}
func (*Directives) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Args struct {
	Value []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *Args) Reset()                    { *m = Args{} }
func (m *Args) String() string            { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()               {}
func (*Args) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CompileRequest struct {
	Tar        []byte      `protobuf:"bytes,1,opt,name=tar,proto3" json:"tar,omitempty"`
	Directives *Directives `protobuf:"bytes,2,opt,name=directives" json:"directives,omitempty"`
}

func (m *CompileRequest) Reset()                    { *m = CompileRequest{} }
func (m *CompileRequest) String() string            { return proto.CompactTextString(m) }
func (*CompileRequest) ProtoMessage()               {}
func (*CompileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CompileRequest) GetDirectives() *Directives {
	if m != nil {
		return m.Directives
	}
	return nil
}

type CompileResponse struct {
	Args []*Args `protobuf:"bytes,1,rep,name=args" json:"args,omitempty"`
	Tar  []byte  `protobuf:"bytes,2,opt,name=tar,proto3" json:"tar,omitempty"`
}

func (m *CompileResponse) Reset()                    { *m = CompileResponse{} }
func (m *CompileResponse) String() string            { return proto.CompactTextString(m) }
func (*CompileResponse) ProtoMessage()               {}
func (*CompileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CompileResponse) GetArgs() []*Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*Directives)(nil), "protoeasy.Directives")
	proto.RegisterType((*Args)(nil), "protoeasy.Args")
	proto.RegisterType((*CompileRequest)(nil), "protoeasy.CompileRequest")
	proto.RegisterType((*CompileResponse)(nil), "protoeasy.CompileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error) {
	out := new(CompileResponse)
	err := grpc.Invoke(ctx, "/protoeasy.API/Compile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Compile(context.Context, *CompileRequest) (*CompileResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Compile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoeasy.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _API_Compile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x73, 0xda, 0x30,
	0x14, 0x2c, 0xd8, 0x7c, 0xf8, 0xd9, 0xb5, 0x5b, 0x15, 0x8a, 0x4a, 0xdb, 0x29, 0xe3, 0x13, 0xbd,
	0x70, 0x20, 0xe7, 0x1c, 0x48, 0x72, 0x08, 0xb7, 0x4c, 0xfe, 0x80, 0x47, 0xd8, 0xc2, 0x38, 0x63,
	0x2c, 0x45, 0x92, 0x49, 0xfc, 0x2b, 0xf2, 0x97, 0x63, 0xcb, 0x18, 0xc8, 0x38, 0x37, 0xed, 0xdb,
	0x7d, 0xbb, 0x9a, 0xb7, 0xe0, 0x71, 0xc1, 0x14, 0xa3, 0x44, 0x16, 0x0b, 0xfd, 0x42, 0xd6, 0x69,
	0xe0, 0xbf, 0x19, 0x00, 0x77, 0x89, 0xa0, 0xa1, 0x4a, 0x0e, 0x54, 0x22, 0x1b, 0x8c, 0x90, 0x73,
	0xdc, 0x99, 0x75, 0xe6, 0x43, 0xf4, 0x07, 0x46, 0x25, 0x08, 0x04, 0x4d, 0x03, 0x96, 0xab, 0x20,
	0x4a, 0x44, 0xc0, 0x89, 0xda, 0xe1, 0x6e, 0xc9, 0x5a, 0xc8, 0x85, 0x7e, 0x28, 0x77, 0x44, 0x70,
	0x6c, 0x68, 0xf5, 0x3f, 0x98, 0xd4, 0xb8, 0xbd, 0x60, 0xea, 0x05, 0x07, 0x4c, 0xb6, 0x79, 0x0a,
	0x71, 0x4f, 0xcb, 0xff, 0xc2, 0xb8, 0x42, 0x6d, 0x71, 0xbf, 0x71, 0xe7, 0x85, 0xda, 0xb1, 0x0c,
	0x0f, 0x1a, 0xf7, 0x1a, 0xb7, 0x17, 0x86, 0x8d, 0xbb, 0xc8, 0x37, 0x05, 0xb6, 0x1a, 0xf7, 0x0a,
	0xb5, 0xc5, 0xa0, 0xc5, 0x00, 0xdd, 0x98, 0x61, 0x5b, 0x4b, 0x7f, 0xc3, 0x8f, 0x98, 0xb5, 0x85,
	0x8e, 0x16, 0xfe, 0x04, 0xb7, 0x24, 0x93, 0x3d, 0x67, 0x42, 0xd5, 0x73, 0xb7, 0x49, 0x8b, 0x05,
	0x0f, 0xb1, 0xa7, 0x2d, 0x46, 0xe0, 0x54, 0x28, 0x88, 0x89, 0xa2, 0x2f, 0xa4, 0xc0, 0xdf, 0x9a,
	0xf3, 0x65, 0x2c, 0x88, 0xe8, 0x96, 0xe4, 0xa9, 0x0a, 0xf6, 0x2c, 0x4a, 0xb6, 0x09, 0x15, 0x12,
	0x7f, 0xd7, 0xec, 0x04, 0x3c, 0xfa, 0x1a, 0xa6, 0x79, 0x44, 0x2b, 0x5f, 0x45, 0x45, 0x86, 0xd1,
	0xcc, 0x98, 0x5b, 0xfe, 0x18, 0xcc, 0x95, 0x88, 0x25, 0xfa, 0x0a, 0xbd, 0x03, 0x49, 0x73, 0x5a,
	0x96, 0x51, 0x8d, 0xef, 0xc1, 0xbd, 0x65, 0x7b, 0x9e, 0xa4, 0xf4, 0x91, 0x3e, 0xe7, 0x54, 0xaa,
	0xaa, 0x2b, 0x45, 0x84, 0xee, 0xca, 0x41, 0xff, 0x01, 0xa2, 0x53, 0x8d, 0xba, 0x21, 0x7b, 0x39,
	0x5e, 0x9c, 0x8b, 0x3f, 0x77, 0xec, 0x5f, 0x83, 0x77, 0x72, 0x92, 0x9c, 0x65, 0x92, 0x96, 0xe7,
	0x32, 0x49, 0x99, 0xa9, 0xa3, 0xec, 0xa5, 0x77, 0xb1, 0xa7, 0xbf, 0x72, 0x4c, 0xaa, 0x5c, 0x9d,
	0xe5, 0x1a, 0x8c, 0xd5, 0xc3, 0x1a, 0xdd, 0xc0, 0xe0, 0xe8, 0x82, 0x7e, 0x5d, 0xe8, 0x3f, 0xfe,
	0x71, 0x3a, 0xfd, 0x8c, 0xaa, 0x43, 0xfd, 0x2f, 0x9b, 0xbe, 0x26, 0xaf, 0xde, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x41, 0x5f, 0x08, 0x01, 0xa1, 0x02, 0x00, 0x00,
}
