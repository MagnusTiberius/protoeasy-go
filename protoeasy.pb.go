// Code generated by protoc-gen-go.
// source: protoeasy.proto
// DO NOT EDIT!

package protoeasy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GoProtocPlugin int32

const (
	GoProtocPlugin_GO_PROTOC_PLUGIN_NONE       GoProtocPlugin = 0
	GoProtocPlugin_GO_PROTOC_PLUGIN_GO         GoProtocPlugin = 1
	GoProtocPlugin_GO_PROTOC_PLUGIN_GOFAST     GoProtocPlugin = 2
	GoProtocPlugin_GO_PROTOC_PLUGIN_GOGO       GoProtocPlugin = 3
	GoProtocPlugin_GO_PROTOC_PLUGIN_GOGOFAST   GoProtocPlugin = 4
	GoProtocPlugin_GO_PROTOC_PLUGIN_GOGOFASTER GoProtocPlugin = 5
	GoProtocPlugin_GO_PROTOC_PLUGIN_GOGOSLICK  GoProtocPlugin = 6
)

var GoProtocPlugin_name = map[int32]string{
	0: "GO_PROTOC_PLUGIN_NONE",
	1: "GO_PROTOC_PLUGIN_GO",
	2: "GO_PROTOC_PLUGIN_GOFAST",
	3: "GO_PROTOC_PLUGIN_GOGO",
	4: "GO_PROTOC_PLUGIN_GOGOFAST",
	5: "GO_PROTOC_PLUGIN_GOGOFASTER",
	6: "GO_PROTOC_PLUGIN_GOGOSLICK",
}
var GoProtocPlugin_value = map[string]int32{
	"GO_PROTOC_PLUGIN_NONE":       0,
	"GO_PROTOC_PLUGIN_GO":         1,
	"GO_PROTOC_PLUGIN_GOFAST":     2,
	"GO_PROTOC_PLUGIN_GOGO":       3,
	"GO_PROTOC_PLUGIN_GOGOFAST":   4,
	"GO_PROTOC_PLUGIN_GOGOFASTER": 5,
	"GO_PROTOC_PLUGIN_GOGOSLICK":  6,
}

func (x GoProtocPlugin) String() string {
	return proto.EnumName(GoProtocPlugin_name, int32(x))
}
func (GoProtocPlugin) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Directives struct {
	Cpp                  bool           `protobuf:"varint,1,opt,name=cpp" json:"cpp,omitempty"`
	CppRelOutDirPath     string         `protobuf:"bytes,2,opt,name=cpp_rel_out_dir_path" json:"cpp_rel_out_dir_path,omitempty"`
	Csharp               bool           `protobuf:"varint,3,opt,name=csharp" json:"csharp,omitempty"`
	CsharpRelOutDirPath  string         `protobuf:"bytes,4,opt,name=csharp_rel_out_dir_path" json:"csharp_rel_out_dir_path,omitempty"`
	Objc                 bool           `protobuf:"varint,5,opt,name=objc" json:"objc,omitempty"`
	ObjcRelOutDirPath    string         `protobuf:"bytes,6,opt,name=objc_rel_out_dir_path" json:"objc_rel_out_dir_path,omitempty"`
	Python               bool           `protobuf:"varint,7,opt,name=python" json:"python,omitempty"`
	PythonRelOutDirPath  string         `protobuf:"bytes,8,opt,name=python_rel_out_dir_path" json:"python_rel_out_dir_path,omitempty"`
	Ruby                 bool           `protobuf:"varint,9,opt,name=ruby" json:"ruby,omitempty"`
	RubyRelOutDirPath    string         `protobuf:"bytes,10,opt,name=ruby_rel_out_dir_path" json:"ruby_rel_out_dir_path,omitempty"`
	Go                   bool           `protobuf:"varint,11,opt,name=go" json:"go,omitempty"`
	GoRelOutDirPath      string         `protobuf:"bytes,12,opt,name=go_rel_out_dir_path" json:"go_rel_out_dir_path,omitempty"`
	GoImportPath         string         `protobuf:"bytes,14,opt,name=go_import_path" json:"go_import_path,omitempty"`
	GoNoDefaultModifiers bool           `protobuf:"varint,15,opt,name=go_no_default_modifiers" json:"go_no_default_modifiers,omitempty"`
	GoProtocPlugin       GoProtocPlugin `protobuf:"varint,16,opt,name=go_protoc_plugin,enum=protoeasy.GoProtocPlugin" json:"go_protoc_plugin,omitempty"`
	Grpc                 bool           `protobuf:"varint,17,opt,name=grpc" json:"grpc,omitempty"`
	GrpcGateway          bool           `protobuf:"varint,18,opt,name=grpc_gateway" json:"grpc_gateway,omitempty"`
	ExcludePattern       []string       `protobuf:"bytes,19,rep,name=exclude_pattern" json:"exclude_pattern,omitempty"`
}

func (m *Directives) Reset()                    { *m = Directives{} }
func (m *Directives) String() string            { return proto.CompactTextString(m) }
func (*Directives) ProtoMessage()               {}
func (*Directives) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Args struct {
	Value []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *Args) Reset()                    { *m = Args{} }
func (m *Args) String() string            { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()               {}
func (*Args) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CompileRequest struct {
	Tar        []byte      `protobuf:"bytes,1,opt,name=tar,proto3" json:"tar,omitempty"`
	Directives *Directives `protobuf:"bytes,2,opt,name=directives" json:"directives,omitempty"`
}

func (m *CompileRequest) Reset()                    { *m = CompileRequest{} }
func (m *CompileRequest) String() string            { return proto.CompactTextString(m) }
func (*CompileRequest) ProtoMessage()               {}
func (*CompileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CompileRequest) GetDirectives() *Directives {
	if m != nil {
		return m.Directives
	}
	return nil
}

type CompileResponse struct {
	Args []*Args `protobuf:"bytes,1,rep,name=args" json:"args,omitempty"`
	Tar  []byte  `protobuf:"bytes,2,opt,name=tar,proto3" json:"tar,omitempty"`
}

func (m *CompileResponse) Reset()                    { *m = CompileResponse{} }
func (m *CompileResponse) String() string            { return proto.CompactTextString(m) }
func (*CompileResponse) ProtoMessage()               {}
func (*CompileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CompileResponse) GetArgs() []*Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*Directives)(nil), "protoeasy.Directives")
	proto.RegisterType((*Args)(nil), "protoeasy.Args")
	proto.RegisterType((*CompileRequest)(nil), "protoeasy.CompileRequest")
	proto.RegisterType((*CompileResponse)(nil), "protoeasy.CompileResponse")
	proto.RegisterEnum("protoeasy.GoProtocPlugin", GoProtocPlugin_name, GoProtocPlugin_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error) {
	out := new(CompileResponse)
	err := grpc.Invoke(ctx, "/protoeasy.API/Compile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Compile(context.Context, *CompileRequest) (*CompileResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Compile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoeasy.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _API_Compile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0x4f, 0x77, 0xd2, 0x40,
	0x10, 0x2f, 0x04, 0x68, 0x19, 0x30, 0xc4, 0xa5, 0xc8, 0x42, 0xfd, 0xd3, 0xc7, 0xa9, 0x7a, 0xe8,
	0x81, 0x9e, 0x3d, 0x20, 0x56, 0xe4, 0xd9, 0x47, 0x78, 0xb4, 0x9e, 0xf7, 0x85, 0xb0, 0x0d, 0xf1,
	0x05, 0x76, 0xdd, 0x6c, 0xaa, 0x7c, 0x42, 0xbf, 0x84, 0x1f, 0xc6, 0xcd, 0x50, 0x28, 0x9a, 0x78,
	0xcb, 0xcc, 0xef, 0xcf, 0xce, 0xcc, 0x2f, 0xd0, 0x90, 0x4a, 0x68, 0xc1, 0xbd, 0x78, 0x73, 0x89,
	0x5f, 0xa4, 0xba, 0x6f, 0xf4, 0x7e, 0x59, 0x00, 0x1f, 0x43, 0xc5, 0x7d, 0x1d, 0x3e, 0xf0, 0x98,
	0xd4, 0xc0, 0xf2, 0xa5, 0xa4, 0x85, 0xf3, 0xc2, 0xc5, 0x09, 0x79, 0x09, 0xa7, 0xa6, 0x60, 0x8a,
	0x47, 0x4c, 0x24, 0x9a, 0x2d, 0x42, 0xc5, 0xa4, 0xa7, 0x97, 0xb4, 0x68, 0xd0, 0x2a, 0xb1, 0xa1,
	0xe2, 0xc7, 0x4b, 0x4f, 0x49, 0x6a, 0x21, 0xfb, 0x0d, 0xb4, 0xb7, 0x75, 0x56, 0x50, 0x42, 0x41,
	0x1d, 0x4a, 0x62, 0xfe, 0xcd, 0xa7, 0x65, 0xa4, 0xbf, 0x82, 0x56, 0x5a, 0x65, 0xc9, 0x95, 0x9d,
	0xbb, 0xdc, 0xe8, 0xa5, 0x58, 0xd3, 0xe3, 0x9d, 0xfb, 0xb6, 0xce, 0x0a, 0x4e, 0x76, 0xee, 0x2a,
	0x99, 0x6f, 0x68, 0x75, 0xe7, 0x9e, 0x56, 0x59, 0x32, 0x20, 0x19, 0xa0, 0x18, 0x08, 0x5a, 0x43,
	0xea, 0x19, 0x34, 0x03, 0x91, 0x25, 0xd6, 0x91, 0xf8, 0x02, 0x6c, 0x03, 0x86, 0x2b, 0x29, 0x94,
	0xde, 0xf6, 0x6d, 0xec, 0x9b, 0x71, 0x4c, 0x7f, 0x2d, 0xd8, 0x82, 0xdf, 0x7b, 0x49, 0xa4, 0xd9,
	0x4a, 0x2c, 0xc2, 0xfb, 0x90, 0xab, 0x98, 0x36, 0xd0, 0xf5, 0x0a, 0x1c, 0x43, 0xc0, 0x3b, 0xfb,
	0x4c, 0x46, 0x49, 0x10, 0xae, 0xa9, 0x63, 0x10, 0xbb, 0xdf, 0xb9, 0x7c, 0x8a, 0x63, 0x24, 0xa6,
	0xc8, 0x98, 0x22, 0x21, 0xdd, 0x21, 0x50, 0xd2, 0xa7, 0xcf, 0xd1, 0xe2, 0x14, 0xea, 0x69, 0xc5,
	0x02, 0x4f, 0xf3, 0x1f, 0xde, 0x86, 0x12, 0xec, 0xb6, 0xa1, 0xc1, 0x7f, 0xfa, 0x51, 0xb2, 0xe0,
	0xe9, 0x3c, 0x9a, 0xab, 0x35, 0x6d, 0x9e, 0x5b, 0x17, 0xd5, 0x5e, 0x0b, 0x4a, 0x03, 0x15, 0xc4,
	0xe4, 0x19, 0x94, 0x1f, 0xbc, 0x28, 0xe1, 0x26, 0xc4, 0xb4, 0xfd, 0x19, 0xec, 0xa1, 0x58, 0xc9,
	0x30, 0xe2, 0x33, 0xfe, 0x3d, 0xe1, 0xb1, 0x4e, 0x33, 0xd6, 0x9e, 0xc2, 0x8c, 0xeb, 0xe4, 0x2d,
	0xc0, 0x62, 0x1f, 0x3f, 0x26, 0x5b, 0xeb, 0xb7, 0x0e, 0x26, 0x7c, 0xfa, 0x37, 0x7a, 0xef, 0xa1,
	0xb1, 0x77, 0x8a, 0xa5, 0x58, 0xc7, 0xdc, 0x9c, 0xb9, 0xe4, 0x99, 0x37, 0xf1, 0xa9, 0x5a, 0xbf,
	0x71, 0xa0, 0xc3, 0x51, 0x1e, 0x5f, 0x4a, 0x5d, 0xeb, 0xef, 0x7e, 0x17, 0xc0, 0xfe, 0x67, 0xdf,
	0x0e, 0xb4, 0x46, 0x2e, 0x9b, 0xce, 0xdc, 0x3b, 0x77, 0xc8, 0xa6, 0x37, 0x5f, 0x47, 0xe3, 0x09,
	0x9b, 0xb8, 0x93, 0x6b, 0xe7, 0xc8, 0xac, 0xd9, 0xcc, 0x40, 0x23, 0xd7, 0x29, 0x98, 0xb8, 0xda,
	0x39, 0xc0, 0xa7, 0xc1, 0xed, 0x9d, 0x53, 0xcc, 0x35, 0x1c, 0xb9, 0x46, 0x67, 0x99, 0x51, 0x3b,
	0xb9, 0x10, 0x2a, 0x4b, 0x26, 0xd0, 0xb3, 0xff, 0xc2, 0xd7, 0x33, 0xa7, 0x4c, 0x5e, 0x43, 0x37,
	0x97, 0x70, 0x7b, 0x33, 0x1e, 0x7e, 0x71, 0x2a, 0xfd, 0x31, 0x58, 0x83, 0xe9, 0x98, 0x7c, 0x80,
	0xe3, 0xc7, 0x23, 0x91, 0xc3, 0xa0, 0xff, 0x8e, 0xa0, 0xdb, 0xcd, 0x83, 0xb6, 0x37, 0xed, 0x1d,
	0xcd, 0x2b, 0x08, 0x5e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x85, 0x33, 0x8b, 0xb8, 0x03,
	0x00, 0x00,
}
