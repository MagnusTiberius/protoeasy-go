// Code generated by protoc-gen-go.
// source: protoeasy.proto
// DO NOT EDIT!

package protoeasy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Directives struct {
	Cpp                     bool     `protobuf:"varint,1,opt,name=cpp" json:"cpp,omitempty"`
	CppRelOutDirPath        string   `protobuf:"bytes,2,opt,name=cpp_rel_out_dir_path" json:"cpp_rel_out_dir_path,omitempty"`
	Csharp                  bool     `protobuf:"varint,3,opt,name=csharp" json:"csharp,omitempty"`
	CsharpRelOutDirPath     string   `protobuf:"bytes,4,opt,name=csharp_rel_out_dir_path" json:"csharp_rel_out_dir_path,omitempty"`
	Objectivec              bool     `protobuf:"varint,5,opt,name=objectivec" json:"objectivec,omitempty"`
	ObjectivecRelOutDirPath string   `protobuf:"bytes,6,opt,name=objectivec_rel_out_dir_path" json:"objectivec_rel_out_dir_path,omitempty"`
	Python                  bool     `protobuf:"varint,7,opt,name=python" json:"python,omitempty"`
	PythonRelOutDirPath     string   `protobuf:"bytes,8,opt,name=python_rel_out_dir_path" json:"python_rel_out_dir_path,omitempty"`
	Ruby                    bool     `protobuf:"varint,9,opt,name=ruby" json:"ruby,omitempty"`
	RubyRelOutDirPath       string   `protobuf:"bytes,10,opt,name=ruby_rel_out_dir_path" json:"ruby_rel_out_dir_path,omitempty"`
	Go                      bool     `protobuf:"varint,11,opt,name=go" json:"go,omitempty"`
	GoRelOutDirPath         string   `protobuf:"bytes,12,opt,name=go_rel_out_dir_path" json:"go_rel_out_dir_path,omitempty"`
	GoImportPath            string   `protobuf:"bytes,14,opt,name=go_import_path" json:"go_import_path,omitempty"`
	Grpc                    bool     `protobuf:"varint,15,opt,name=grpc" json:"grpc,omitempty"`
	GrpcGateway             bool     `protobuf:"varint,16,opt,name=grpc_gateway" json:"grpc_gateway,omitempty"`
	Protolog                bool     `protobuf:"varint,17,opt,name=protolog" json:"protolog,omitempty"`
	ExcludePattern          []string `protobuf:"bytes,18,rep,name=exclude_pattern" json:"exclude_pattern,omitempty"`
}

func (m *Directives) Reset()                    { *m = Directives{} }
func (m *Directives) String() string            { return proto.CompactTextString(m) }
func (*Directives) ProtoMessage()               {}
func (*Directives) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Args struct {
	Value []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *Args) Reset()                    { *m = Args{} }
func (m *Args) String() string            { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()               {}
func (*Args) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CompileRequest struct {
	Tar        []byte      `protobuf:"bytes,1,opt,name=tar,proto3" json:"tar,omitempty"`
	Directives *Directives `protobuf:"bytes,2,opt,name=directives" json:"directives,omitempty"`
}

func (m *CompileRequest) Reset()                    { *m = CompileRequest{} }
func (m *CompileRequest) String() string            { return proto.CompactTextString(m) }
func (*CompileRequest) ProtoMessage()               {}
func (*CompileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CompileRequest) GetDirectives() *Directives {
	if m != nil {
		return m.Directives
	}
	return nil
}

type CompileResponse struct {
	Args []*Args `protobuf:"bytes,1,rep,name=args" json:"args,omitempty"`
	Tar  []byte  `protobuf:"bytes,2,opt,name=tar,proto3" json:"tar,omitempty"`
}

func (m *CompileResponse) Reset()                    { *m = CompileResponse{} }
func (m *CompileResponse) String() string            { return proto.CompactTextString(m) }
func (*CompileResponse) ProtoMessage()               {}
func (*CompileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CompileResponse) GetArgs() []*Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*Directives)(nil), "protoeasy.Directives")
	proto.RegisterType((*Args)(nil), "protoeasy.Args")
	proto.RegisterType((*CompileRequest)(nil), "protoeasy.CompileRequest")
	proto.RegisterType((*CompileResponse)(nil), "protoeasy.CompileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error) {
	out := new(CompileResponse)
	err := grpc.Invoke(ctx, "/protoeasy.API/Compile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Compile(context.Context, *CompileRequest) (*CompileResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Compile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoeasy.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _API_Compile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0xcb, 0x72, 0xa2, 0x40,
	0x14, 0x1d, 0x05, 0x1f, 0x5c, 0x18, 0x70, 0x7a, 0x74, 0xec, 0xd1, 0x99, 0x1a, 0x8b, 0xd9, 0x98,
	0x8d, 0x0b, 0xb3, 0xce, 0xc2, 0x24, 0x8b, 0xb8, 0x4b, 0xe5, 0x07, 0xa8, 0x16, 0xbb, 0x90, 0x14,
	0xda, 0x9d, 0xa6, 0x31, 0xe1, 0x2b, 0xf2, 0xcb, 0x81, 0x8b, 0xaf, 0x14, 0xd9, 0x71, 0xce, 0x3d,
	0x0f, 0xaa, 0x0f, 0x78, 0x52, 0x09, 0x2d, 0x38, 0x4b, 0xf3, 0x19, 0x7e, 0x11, 0xeb, 0x44, 0xf8,
	0xef, 0x06, 0xc0, 0x7d, 0xac, 0x78, 0xa8, 0xe3, 0x3d, 0x4f, 0x89, 0x0d, 0x46, 0x28, 0x25, 0x6d,
	0x4c, 0x1a, 0xd3, 0x2e, 0xf9, 0x03, 0xfd, 0x02, 0x04, 0x8a, 0x27, 0x81, 0xc8, 0x74, 0xb0, 0x8e,
	0x55, 0x20, 0x99, 0xde, 0xd0, 0x66, 0x71, 0xb5, 0x88, 0x0b, 0xed, 0x30, 0xdd, 0x30, 0x25, 0xa9,
	0x81, 0xea, 0x7f, 0x30, 0xac, 0x70, 0xdd, 0x60, 0xa2, 0x81, 0x00, 0x88, 0xd5, 0x73, 0xd5, 0x14,
	0xd2, 0x16, 0x9a, 0xfe, 0xc3, 0xf8, 0xcc, 0xd5, 0x8d, 0xed, 0x63, 0x93, 0xcc, 0xf5, 0x46, 0xec,
	0x68, 0xe7, 0xd8, 0x54, 0xe1, 0xba, 0xa1, 0x8b, 0x06, 0x07, 0x4c, 0x95, 0xad, 0x72, 0x6a, 0xa1,
	0xfc, 0x2f, 0x0c, 0x4a, 0x54, 0x17, 0x03, 0x8a, 0x01, 0x9a, 0x91, 0xa0, 0x36, 0x4a, 0xc7, 0xf0,
	0x33, 0x12, 0x75, 0xa1, 0x83, 0xc2, 0x5f, 0xe0, 0x16, 0xc7, 0x78, 0x2b, 0x85, 0xd2, 0x15, 0xef,
	0x1e, 0xdb, 0x22, 0x25, 0x43, 0xea, 0x61, 0x44, 0x1f, 0x9c, 0x12, 0x05, 0x11, 0xd3, 0xfc, 0x95,
	0xe5, 0xb4, 0x87, 0x6c, 0x0f, 0xba, 0xf8, 0xe6, 0x89, 0x88, 0xe8, 0x0f, 0x64, 0x86, 0xe0, 0xf1,
	0xb7, 0x30, 0xc9, 0xd6, 0xbc, 0xcc, 0xd2, 0x5c, 0xed, 0x28, 0x99, 0x18, 0x53, 0xcb, 0x1f, 0x80,
	0xb9, 0x50, 0x51, 0x4a, 0xbe, 0x43, 0x6b, 0xcf, 0x92, 0x8c, 0x17, 0x63, 0x94, 0xf4, 0x03, 0xb8,
	0x77, 0x62, 0x2b, 0xe3, 0x84, 0x3f, 0xf1, 0x97, 0x8c, 0xa7, 0xba, 0xdc, 0x4a, 0x33, 0x85, 0x5b,
	0x39, 0xe4, 0x0a, 0x60, 0x7d, 0x9a, 0x11, 0x17, 0xb2, 0xe7, 0x83, 0xd9, 0x79, 0xf8, 0xf3, 0xc6,
	0xfe, 0x0d, 0x78, 0xa7, 0xa4, 0x54, 0x8a, 0x5d, 0xca, 0x8b, 0x27, 0x32, 0x59, 0xd1, 0x89, 0x55,
	0xf6, 0xdc, 0xbb, 0xf0, 0xe1, 0xaf, 0x1c, 0x9a, 0xca, 0x54, 0x67, 0xbe, 0x04, 0x63, 0xf1, 0xb8,
	0x24, 0xb7, 0xd0, 0x39, 0xa4, 0x90, 0xdf, 0x17, 0xfa, 0xcf, 0xff, 0x38, 0x1a, 0x7d, 0x75, 0xaa,
	0x4a, 0xfd, 0x6f, 0xab, 0x36, 0x1e, 0xaf, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x36, 0x68,
	0x6c, 0xa1, 0x02, 0x00, 0x00,
}
